name: iOS starter workflow

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Select Xcode 16.3
        run: sudo xcode-select --switch /Applications/Xcode_16.3.app
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build for testing
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)

          echo "Detecting device..."
          device=$(xcrun xctrace list devices 2>&1 \
                  | tee /dev/stderr \
                  | grep -oE 'iPhone.*?[^\(]+' \
                  | head -1 \
                  | awk '{$1=$1;print}' \
                  | sed -e "s/ Simulator$//")
          echo "Selected device: $device"

          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=iOS Simulator,name=iPhone 16,OS=18.4" -derivedDataPath ./DerivedData -skipMacroValidation
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
          CODE_SIGNING_ALLOWED: "NO"
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=iOS Simulator,name=iPhone 16,OS=18.4" -skipMacroValidation -resultBundlePath TestResults.xcresult
      - name: Upload xcresult artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults.xcresult

      - name: Print test failure summary
        if: always() # 即使測試失敗也要執行
        run: |
          echo "=== Test Failures Summary ==="
          xcrun xcresulttool get \
          --path TestResults.xcresult \
          --format json | jq -r '
            .. | objects | select(has("testStatus") and .testStatus == "Failure") |
            "\(.identifier) - \(.name) : \(.testStatus)"'
